import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedPublicKeysClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    getPublicKeyById(request: T.GetPublicKeyByIdRequest): Promise<T.GetPublicKeyByIdResponse>;
    createPublicKeyInit(request: T.CreatePublicKeyRequest): Promise<UserActionChallengeResponse>;
    createPublicKeyComplete(request: T.CreatePublicKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePublicKeyResponse>;
    listPublicKeys(): Promise<T.ListPublicKeysResponse>;
    getAddressForNetwork(request: T.GetAddressForNetworkRequest): Promise<T.GetAddressForNetworkResponse>;
    getSignatureById(request: T.GetSignatureByIdRequest): Promise<T.GetSignatureByIdResponse>;
    createSignatureInit(request: T.CreateSignatureRequest): Promise<UserActionChallengeResponse>;
    createSignatureComplete(request: T.CreateSignatureRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateSignatureResponse>;
    startWalletConnectSessionInit(request: T.StartWalletConnectSessionRequest): Promise<UserActionChallengeResponse>;
    startWalletConnectSessionComplete(request: T.StartWalletConnectSessionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.StartWalletConnectSessionResponse>;
    listTransactions(request: T.ListTransactionsRequest): Promise<T.ListTransactionsResponse>;
    createTransactionInit(request: T.CreateTransactionRequest): Promise<UserActionChallengeResponse>;
    createTransactionComplete(request: T.CreateTransactionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateTransactionResponse>;
    getTransactionById(request: T.GetTransactionByIdRequest): Promise<T.GetTransactionByIdResponse>;
}
