"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKeysClient = void 0;
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class PublicKeysClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async getPublicKeyById(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys/:publicKeyId', {
            path: { publicKeyId: request.publicKeyId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createPublicKey(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listPublicKeys() {
        const path = (0, url_1.buildPathAndQuery)('/public-keys', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getAddressForNetwork(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/public-keys/:publicKeyId/address', {
            path: { publicKeyId: request.publicKeyId },
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getSignatureById(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys/:publicKeyId/signatures/:signatureId', {
            path: {
                publicKeyId: request.publicKeyId,
                signatureId: request.signatureId,
            },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys/:publicKeyId/signatures', {
            path: { publicKeyId: request.publicKeyId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async startWalletConnectSession(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys/:publicKeyId/walletconnect-session', {
            path: { publicKeyId: request.publicKeyId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listTransactions(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/public-keys/:publicKeyId/transactions', {
            path: { publicKeyId: request.publicKeyId },
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createTransaction(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys/transactions', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getTransactionById(request) {
        const path = (0, url_1.buildPathAndQuery)('/public-keys/transactions/:transactionId', {
            path: { transactionId: request.transactionId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.PublicKeysClient = PublicKeysClient;
