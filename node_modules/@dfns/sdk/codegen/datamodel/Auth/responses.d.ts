import { BadRequestError, EntityNotFoundError, ForbiddenError, UnauthorizedError } from '../Foundations';
import { AccessTokenInfoWithPublicKey, AppInfoWithPublicKey, AvailableOrg, CredentialInfo, GenericSuccessMessage, UserAccessTokenInformation, UserActionSignature, UserCredentialChallenge, UserInfo, UserLogin, UserLoginChallenge, UserRecoveryChallenge, UserRegistration, UserRegistrationChallenge } from './types';
export type CreateDelegatedUserRegistrationSuccess = UserRegistrationChallenge;
export type CreateDelegatedUserRegistrationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateDelegatedUserRegistrationResponse = CreateDelegatedUserRegistrationSuccess | CreateDelegatedUserRegistrationError;
export type CreateUserRegistrationChallengeSuccess = UserRegistrationChallenge;
export type CreateUserRegistrationChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserRegistrationChallengeResponse = CreateUserRegistrationChallengeSuccess | CreateUserRegistrationChallengeError;
export type CreateUserRegistrationSuccess = UserRegistration;
export type CreateUserRegistrationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserRegistrationResponse = CreateUserRegistrationSuccess | CreateUserRegistrationError;
export type CreateUserLoginChallengeSuccess = UserLoginChallenge;
export type CreateUserLoginChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserLoginChallengeResponse = CreateUserLoginChallengeSuccess | CreateUserLoginChallengeError;
export type CreateUserLoginSuccess = UserLogin;
export type CreateUserLoginError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserLoginResponse = CreateUserLoginSuccess | CreateUserLoginError;
export type CreateDelegatedUserLoginSuccess = UserLogin;
export type CreateDelegatedUserLoginError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateDelegatedUserLoginResponse = CreateDelegatedUserLoginSuccess | CreateDelegatedUserLoginError;
export type CreateUserActionSignatureChallengeSuccess = UserLoginChallenge;
export type CreateUserActionSignatureChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserActionSignatureChallengeResponse = CreateUserActionSignatureChallengeSuccess | CreateUserActionSignatureChallengeError;
export type CreateUserActionSignatureSuccess = UserActionSignature;
export type CreateUserActionSignatureError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserActionSignatureResponse = CreateUserActionSignatureSuccess | CreateUserActionSignatureError;
export type ResendUserRegistrationEmailSuccess = GenericSuccessMessage;
export type ResendUserRegistrationEmailError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ResendUserRegistrationEmailResponse = ResendUserRegistrationEmailSuccess | ResendUserRegistrationEmailError;
export type CreateUserCredentialChallengeSuccess = UserCredentialChallenge;
export type CreateUserCredentialChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserCredentialChallengeResponse = CreateUserCredentialChallengeSuccess | CreateUserCredentialChallengeError;
export type CreateUserCredentialSuccess = CredentialInfo;
export type CreateUserCredentialError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserCredentialResponse = CreateUserCredentialSuccess | CreateUserCredentialError;
export type ActivateCredentialSuccess = GenericSuccessMessage;
export type ActivateCredentialError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivateCredentialResponse = ActivateCredentialSuccess | ActivateCredentialError;
export type DeactivateCredentialSuccess = GenericSuccessMessage;
export type DeactivateCredentialError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivateCredentialResponse = DeactivateCredentialSuccess | DeactivateCredentialError;
export type ListUserCredentialsSuccess = {
    items: CredentialInfo[];
};
export type ListUserCredentialsError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListUserCredentialsResponse = ListUserCredentialsSuccess | ListUserCredentialsError;
export type CreateCodeLoginChallengeSuccess = UserLoginChallenge;
export type CreateCodeLoginChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateCodeLoginChallengeResponse = CreateCodeLoginChallengeSuccess | CreateCodeLoginChallengeError;
export type CreateCodeLoginSuccess = GenericSuccessMessage;
export type CreateCodeLoginError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateCodeLoginResponse = CreateCodeLoginSuccess | CreateCodeLoginError;
export type CreateUserLoginFromCodeSuccess = UserLogin;
export type CreateUserLoginFromCodeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserLoginFromCodeResponse = CreateUserLoginFromCodeSuccess | CreateUserLoginFromCodeError;
export type CreateUserActionSignatureFromCodeSuccess = UserActionSignature;
export type CreateUserActionSignatureFromCodeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserActionSignatureFromCodeResponse = CreateUserActionSignatureFromCodeSuccess | CreateUserActionSignatureFromCodeError;
export type CreateCodeUserActionSignatureChallengeSuccess = UserLoginChallenge;
export type CreateCodeUserActionSignatureChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateCodeUserActionSignatureChallengeResponse = CreateCodeUserActionSignatureChallengeSuccess | CreateCodeUserActionSignatureChallengeError;
export type CreateCodeUserActionSignatureSuccess = GenericSuccessMessage;
export type CreateCodeUserActionSignatureError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateCodeUserActionSignatureResponse = CreateCodeUserActionSignatureSuccess | CreateCodeUserActionSignatureError;
export type CreateAvailableOrgListSuccess = {
    items: AvailableOrg[];
};
export type CreateAvailableOrgListError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateAvailableOrgListResponse = CreateAvailableOrgListSuccess | CreateAvailableOrgListError;
export type ListPersonalAccessTokensSuccess = {
    items: AccessTokenInfoWithPublicKey[];
};
export type ListPersonalAccessTokensError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListPersonalAccessTokensResponse = ListPersonalAccessTokensSuccess | ListPersonalAccessTokensError;
export type CreatePersonalAccessTokenSuccess = AccessTokenInfoWithPublicKey;
export type CreatePersonalAccessTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreatePersonalAccessTokenResponse = CreatePersonalAccessTokenSuccess | CreatePersonalAccessTokenError;
export type GetPersonalAccessTokensSuccess = AccessTokenInfoWithPublicKey;
export type GetPersonalAccessTokensError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type GetPersonalAccessTokensResponse = GetPersonalAccessTokensSuccess | GetPersonalAccessTokensError;
export type UpdatePersonalAccessTokenSuccess = AccessTokenInfoWithPublicKey;
export type UpdatePersonalAccessTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type UpdatePersonalAccessTokenResponse = UpdatePersonalAccessTokenSuccess | UpdatePersonalAccessTokenError;
export type ArchivePersonalAccessTokenSuccess = AccessTokenInfoWithPublicKey;
export type ArchivePersonalAccessTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ArchivePersonalAccessTokenResponse = ArchivePersonalAccessTokenSuccess | ArchivePersonalAccessTokenError;
export type ActivatePersonalAccessTokenSuccess = AccessTokenInfoWithPublicKey;
export type ActivatePersonalAccessTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivatePersonalAccessTokenResponse = ActivatePersonalAccessTokenSuccess | ActivatePersonalAccessTokenError;
export type DeactivatePersonalAccessTokenSuccess = AccessTokenInfoWithPublicKey;
export type DeactivatePersonalAccessTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivatePersonalAccessTokenResponse = DeactivatePersonalAccessTokenSuccess | DeactivatePersonalAccessTokenError;
export type ListServiceAccountsSuccess = {
    items: UserAccessTokenInformation[];
};
export type ListServiceAccountsError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListServiceAccountsResponse = ListServiceAccountsSuccess | ListServiceAccountsError;
export type CreateServiceAccountSuccess = UserAccessTokenInformation;
export type CreateServiceAccountError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateServiceAccountResponse = CreateServiceAccountSuccess | CreateServiceAccountError;
export type GetServiceAccountSuccess = UserAccessTokenInformation;
export type GetServiceAccountError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type GetServiceAccountResponse = GetServiceAccountSuccess | GetServiceAccountError;
export type UpdateServiceAccountSuccess = UserAccessTokenInformation;
export type UpdateServiceAccountError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type UpdateServiceAccountResponse = UpdateServiceAccountSuccess | UpdateServiceAccountError;
export type ArchiveServiceAccountSuccess = UserAccessTokenInformation;
export type ArchiveServiceAccountError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ArchiveServiceAccountResponse = ArchiveServiceAccountSuccess | ArchiveServiceAccountError;
export type ActivateServiceAccountSuccess = UserAccessTokenInformation;
export type ActivateServiceAccountError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivateServiceAccountResponse = ActivateServiceAccountSuccess | ActivateServiceAccountError;
export type DeactivateServiceAccountSuccess = UserAccessTokenInformation;
export type DeactivateServiceAccountError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivateServiceAccountResponse = DeactivateServiceAccountSuccess | DeactivateServiceAccountError;
export type ListServiceAccountTokensSuccess = {
    items: AccessTokenInfoWithPublicKey[];
};
export type ListServiceAccountTokensError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListServiceAccountTokensResponse = ListServiceAccountTokensSuccess | ListServiceAccountTokensError;
export type CreateServiceAccountTokenSuccess = AccessTokenInfoWithPublicKey;
export type CreateServiceAccountTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateServiceAccountTokenResponse = CreateServiceAccountTokenSuccess | CreateServiceAccountTokenError;
export type GetServiceAccountTokenSuccess = AccessTokenInfoWithPublicKey;
export type GetServiceAccountTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type GetServiceAccountTokenResponse = GetServiceAccountTokenSuccess | GetServiceAccountTokenError;
export type UpdateServiceAccountTokenSuccess = AccessTokenInfoWithPublicKey;
export type UpdateServiceAccountTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type UpdateServiceAccountTokenResponse = UpdateServiceAccountTokenSuccess | UpdateServiceAccountTokenError;
export type ArchiveServiceAccountTokenSuccess = AccessTokenInfoWithPublicKey;
export type ArchiveServiceAccountTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ArchiveServiceAccountTokenResponse = ArchiveServiceAccountTokenSuccess | ArchiveServiceAccountTokenError;
export type ActivateServiceAccountTokenSuccess = AccessTokenInfoWithPublicKey;
export type ActivateServiceAccountTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivateServiceAccountTokenResponse = ActivateServiceAccountTokenSuccess | ActivateServiceAccountTokenError;
export type DeactivateServiceAccountTokenSuccess = AccessTokenInfoWithPublicKey;
export type DeactivateServiceAccountTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivateServiceAccountTokenResponse = DeactivateServiceAccountTokenSuccess | DeactivateServiceAccountTokenError;
export type ListUsersSuccess = {
    items: UserInfo[];
};
export type ListUsersError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListUsersResponse = ListUsersSuccess | ListUsersError;
export type CreateUserSuccess = UserInfo;
export type CreateUserError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserResponse = CreateUserSuccess | CreateUserError;
export type GetUserSuccess = UserInfo;
export type GetUserError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type GetUserResponse = GetUserSuccess | GetUserError;
export type UpdateUserSuccess = UserInfo;
export type UpdateUserError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type UpdateUserResponse = UpdateUserSuccess | UpdateUserError;
export type ArchiveUserSuccess = UserInfo;
export type ArchiveUserError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ArchiveUserResponse = ArchiveUserSuccess | ArchiveUserError;
export type ActivateUserSuccess = UserInfo;
export type ActivateUserError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivateUserResponse = ActivateUserSuccess | ActivateUserError;
export type DeactivateUserSuccess = UserInfo;
export type DeactivateUserError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivateUserResponse = DeactivateUserSuccess | DeactivateUserError;
export type ListApplicationsSuccess = {
    items: AppInfoWithPublicKey[];
};
export type ListApplicationsError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListApplicationsResponse = ListApplicationsSuccess | ListApplicationsError;
export type CreateApplicationSuccess = AppInfoWithPublicKey;
export type CreateApplicationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateApplicationResponse = CreateApplicationSuccess | CreateApplicationError;
export type GetApplicationSuccess = AppInfoWithPublicKey;
export type GetApplicationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type GetApplicationResponse = GetApplicationSuccess | GetApplicationError;
export type UpdateApplicationSuccess = AppInfoWithPublicKey;
export type UpdateApplicationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type UpdateApplicationResponse = UpdateApplicationSuccess | UpdateApplicationError;
export type ArchiveApplicationSuccess = AppInfoWithPublicKey;
export type ArchiveApplicationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ArchiveApplicationResponse = ArchiveApplicationSuccess | ArchiveApplicationError;
export type ActivateApplicationSuccess = AppInfoWithPublicKey;
export type ActivateApplicationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivateApplicationResponse = ActivateApplicationSuccess | ActivateApplicationError;
export type DeactivateApplicationSuccess = AppInfoWithPublicKey;
export type DeactivateApplicationError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivateApplicationResponse = DeactivateApplicationSuccess | DeactivateApplicationError;
export type ListApplicationTokensSuccess = {
    items: AccessTokenInfoWithPublicKey[];
};
export type ListApplicationTokensError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ListApplicationTokensResponse = ListApplicationTokensSuccess | ListApplicationTokensError;
export type CreateApplicationTokenSuccess = AccessTokenInfoWithPublicKey;
export type CreateApplicationTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateApplicationTokenResponse = CreateApplicationTokenSuccess | CreateApplicationTokenError;
export type GetApplicationTokenSuccess = AccessTokenInfoWithPublicKey;
export type GetApplicationTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type GetApplicationTokenResponse = GetApplicationTokenSuccess | GetApplicationTokenError;
export type UpdateApplicationTokenSuccess = AccessTokenInfoWithPublicKey;
export type UpdateApplicationTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type UpdateApplicationTokenResponse = UpdateApplicationTokenSuccess | UpdateApplicationTokenError;
export type ArchiveApplicationTokenSuccess = AccessTokenInfoWithPublicKey;
export type ArchiveApplicationTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ArchiveApplicationTokenResponse = ArchiveApplicationTokenSuccess | ArchiveApplicationTokenError;
export type ActivateApplicationTokenSuccess = AccessTokenInfoWithPublicKey;
export type ActivateApplicationTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type ActivateApplicationTokenResponse = ActivateApplicationTokenSuccess | ActivateApplicationTokenError;
export type DeactivateApplicationTokenSuccess = AccessTokenInfoWithPublicKey;
export type DeactivateApplicationTokenError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type DeactivateApplicationTokenResponse = DeactivateApplicationTokenSuccess | DeactivateApplicationTokenError;
export type CreateUserRecoveryChallengeSuccess = UserRecoveryChallenge;
export type CreateUserRecoveryChallengeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserRecoveryChallengeResponse = CreateUserRecoveryChallengeSuccess | CreateUserRecoveryChallengeError;
export type CreateUserRecoveryCodeSuccess = GenericSuccessMessage;
export type CreateUserRecoveryCodeError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserRecoveryCodeResponse = CreateUserRecoveryCodeSuccess | CreateUserRecoveryCodeError;
export type CreateUserRecoverySuccess = UserRegistration;
export type CreateUserRecoveryError = {
    error: UnauthorizedError | ForbiddenError | BadRequestError | EntityNotFoundError;
};
export type CreateUserRecoveryResponse = CreateUserRecoverySuccess | CreateUserRecoveryError;
