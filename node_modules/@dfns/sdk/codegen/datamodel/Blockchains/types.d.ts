import { Amount, BlockchainAddress, IntegerPositiveStrict, IsoDatetime } from '../Foundations';
export type BtcBlock = {
    hash: string;
    number: number;
    timestamp: IsoDatetime;
    transactions: BtcTransaction[];
};
export type BtcTransaction = {
    hash: string;
    blockNumber: number;
    size: number;
    weight: number;
    locktime: number;
    vins: BtcTransactionInput[];
    vouts: BtcTransactionOutput[];
    coinbase: boolean;
    fee?: Amount;
};
export type BtcTransactionInput = {
    hash: string;
    index: number;
    address?: BlockchainAddress;
    value?: Amount;
};
export type BtcTransactionOutput = {
    index: number;
    address?: BlockchainAddress;
    value: Amount;
};
export type EvmBlock = {
    hash: string;
    number: number;
    timestamp: IsoDatetime;
    transactions: EvmTransaction[];
};
export type EvmTransaction = {
    hash: string;
    blockNumber: number;
    nonce: number;
    from: BlockchainAddress;
    to?: BlockchainAddress;
    value: Amount;
    data?: string;
    signature: string;
    gasLimit: Amount;
    gasPrice?: Amount;
    maxFeePerGas?: Amount;
    maxPriorityFeePerGas?: Amount;
    receipt?: EvmTransactionReceipt;
    logs?: EvmLog[];
};
export type EvmTransactionReceipt = {
    gasUsed: Amount;
    effectiveGasPrice: Amount;
    fee: Amount;
    status: TransactionStatus;
    error?: string;
};
export type Erc20Log = {
    kind: EvmLogKind.Erc20;
    index: number;
    address: BlockchainAddress;
    from: BlockchainAddress;
    to: BlockchainAddress;
    value: Amount;
};
export type Erc721Log = {
    kind: EvmLogKind.Erc721;
    index: number;
    address: BlockchainAddress;
    from: BlockchainAddress;
    to: BlockchainAddress;
    tokenId: string;
};
export type EvmUntypedLog = {
    kind: EvmLogKind.Unknown;
    index: number;
    address: BlockchainAddress;
    topics: string[];
    data: string;
};
export type EvmFeeEstimates = {
    safeLow: Eip1559Fee;
    standard: Eip1559Fee;
    fast: Eip1559Fee;
    estimatedBaseFee: string;
    blockNumber: IntegerPositiveStrict;
    kind: FeeEstimationKind;
};
export type Eip1559Fee = {
    maxPriorityFee: string;
    maxFee: string;
};
export type CallViewFunctionInput = {
    data: string;
    contract: string;
};
export type CallViewFunctionResult = {
    data: string;
};
export type TrxBlock = {
    hash: string;
    number: number;
    timestamp: IsoDatetime;
    transactions: TrxTransaction[];
};
export type TrxTransaction = {
    hash: string;
    blockNumber: number;
    feeLimit?: Amount;
    from: BlockchainAddress;
    receipt: TrxReceipt;
};
export type TrxTransferTransaction = {
    hash: string;
    blockNumber: number;
    feeLimit?: Amount;
    from: BlockchainAddress;
    receipt: TrxReceipt;
    kind: TrxTransactionKind.TransferContract;
    to: BlockchainAddress;
    amount: Amount;
};
export type TrxTransferAssetTransaction = {
    hash: string;
    blockNumber: number;
    feeLimit?: Amount;
    from: BlockchainAddress;
    receipt: TrxReceipt;
    kind: TrxTransactionKind.TransferAssetContract;
    asset: string;
    to: BlockchainAddress;
    amount: Amount;
};
export type TrxSmartContractTransaction = {
    hash: string;
    blockNumber: number;
    feeLimit?: Amount;
    from: BlockchainAddress;
    receipt: TrxReceipt;
    kind: TrxTransactionKind.TriggerSmartContract;
    contract: BlockchainAddress;
    data: string;
    logs: EvmLog[];
};
export type TrxUntypedTransaction = {
    hash: string;
    blockNumber: number;
    feeLimit?: Amount;
    from: BlockchainAddress;
    receipt: TrxReceipt;
    kind: TrxTransactionKind;
    parameters: Record<string, unknown>;
};
export type TrxReceipt = {
    fee?: Amount;
    energyFee?: Amount;
    energyUsage?: Amount;
    netFee?: Amount;
    netUsage?: Amount;
    status: TransactionStatus;
    error?: string;
};
export type XrpBlock = {
    hash: string;
    number: number;
    timestamp: IsoDatetime;
    transactions: XrpTransaction[];
};
export type XrpTransaction = {
    hash: string;
    blockNumber: number;
    account: BlockchainAddress;
    fee: Amount;
    status: TransactionStatus;
    error?: string;
};
export type XrpPaymentTransaction = {
    hash: string;
    blockNumber: number;
    account: BlockchainAddress;
    fee: Amount;
    status: TransactionStatus;
    error?: string;
    kind: XrpTransactionKind.Payment;
    to: BlockchainAddress;
    currency?: string;
    issuer?: BlockchainAddress;
    amount: Amount;
};
export type XrpUntypedTransaction = {
    hash: string;
    blockNumber: number;
    account: BlockchainAddress;
    fee: Amount;
    status: TransactionStatus;
    error?: string;
    kind: XrpTransactionKind;
};
export type SolBlock = {
    hash: string;
    number: number;
    timestamp: IsoDatetime;
    transactions: SolTransaction[];
};
export type SolTransaction = {
    hash: string;
    blockNumber: number;
    version: string;
    from: BlockchainAddress;
    instructions: SolInstruction[];
    fee: Amount;
    status: TransactionStatus;
    error?: string;
};
export type SolInstruction = {
    index: string;
    program: BlockchainAddress;
};
export type SolSystemTransferInstruction = {
    index: string;
    program: BlockchainAddress;
    kind: SolInstructionKind.SystemTransfer;
    from: BlockchainAddress;
    to: BlockchainAddress;
    value: Amount;
};
export type SolTokenTransferInstruction = {
    index: string;
    program: BlockchainAddress;
    kind: SolInstructionKind.TokenTransfer;
    mint: BlockchainAddress;
    from: BlockchainAddress;
    fromTokenAccount: BlockchainAddress;
    to: BlockchainAddress;
    toTokenAccount: BlockchainAddress;
    value: Amount;
};
export type SolUntypedInstruction = {
    index: string;
    program: BlockchainAddress;
    accounts: BlockchainAddress[];
    data: string;
};
export type EvmLog = Erc20Log | Erc721Log | EvmUntypedLog;
export declare enum EvmLogKind {
    Unknown = "Unknown",
    Erc20 = "Erc20",
    Erc721 = "Erc721"
}
export declare enum TransactionStatus {
    SUCCESS = "SUCCESS",
    FAILED = "FAILED"
}
export declare enum TrxTransactionKind {
    TransferContract = "TransferContract",
    TransferAssetContract = "TransferAssetContract",
    TriggerSmartContract = "TriggerSmartContract"
}
export declare enum XrpTransactionKind {
    Payment = "Payment"
}
export declare enum SolInstructionKind {
    SystemTransfer = "SystemTransfer",
    TokenTransfer = "TokenTransfer"
}
export declare enum FeeEstimationKind {
    Eip1559 = "Eip1559",
    EthLegacy = "EthLegacy"
}
