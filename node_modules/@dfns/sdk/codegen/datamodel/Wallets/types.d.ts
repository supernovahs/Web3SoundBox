import { Amount, BlockchainAddress, EntityId, IsoDatetime, Tag } from '../Foundations';
export type TransferNativeAsset = {
    kind: TransferKind.Native;
    to: BlockchainAddress;
    amount: Amount;
};
export type TransferErc20Asset = {
    kind: TransferKind.Erc20;
    contract: BlockchainAddress;
    to: BlockchainAddress;
    amount: Amount;
};
export type TransferErc721Asset = {
    kind: TransferKind.Erc721;
    contract: BlockchainAddress;
    to: BlockchainAddress;
    tokenId: string;
};
export type BroadcastEvmTransaction = {
    kind: TransactionKind.Evm;
    to?: BlockchainAddress;
    value?: Amount;
    data?: string;
    nonce?: number;
};
export type BroadcastEip1559Transaction = {
    kind: TransactionKind.Eip1559;
    to?: BlockchainAddress;
    value?: Amount;
    data?: string;
    nonce?: number;
    gasLimit?: Amount;
    maxPriorityFeePerGas?: Amount;
    maxFeePerGas?: Amount;
};
export type BroadcastEvmLegacyTransaction = {
    kind: TransactionKind.EvmLegacy;
    to?: BlockchainAddress;
    value?: Amount;
    data?: string;
    nonce?: number;
    gasLimit?: Amount;
    gasPrice?: Amount;
};
export type SignHash = {
    kind: SignatureKind.Hash;
    hash: string;
};
export type Eip712Domain = {
    name?: string;
    version?: string;
    chainId?: number;
    verifyingContract?: BlockchainAddress;
    salt?: string;
};
export type SignEip712TypedData = {
    kind: SignatureKind.Eip712;
    types: Record<string, unknown>;
    domain: Eip712Domain;
    message: Record<string, unknown>;
};
export type Wallet = {
    id: EntityId;
    network: BlockchainNetwork;
    status: WalletStatus;
    address?: string;
    name?: string;
    externalId?: string;
    tags: Tag[];
    dateCreated: IsoDatetime;
};
export type WalletAssets = {
    walletId: EntityId;
    network: BlockchainNetwork;
    assets: WalletAsset[];
};
export type WalletAsset = {
    contract?: string;
    symbol?: string;
    decimals: number;
    verified?: boolean;
    balance: Amount;
};
export type WalletNfts = {
    walletId: EntityId;
    network: BlockchainNetwork;
    nfts: WalletNft[];
};
export type WalletNft = {
    contract: string;
    symbol?: string;
    verified?: boolean;
    tokenIds: string[];
    count: number;
};
export type PaginatedWalletList = {
    items: Wallet[];
    nextPageToken?: string;
};
export type NativeTransferEvent = {
    kind: EventKind.NativeTransfer;
    walletId: EntityId;
    network: BlockchainNetwork;
    blockNumber: number;
    txHash: string;
    index?: string;
    timestamp: IsoDatetime;
    fee?: Amount;
    direction: TransferDirection;
    symbol: string;
    decimals: number;
    verified?: boolean;
    from: BlockchainAddress;
    to: BlockchainAddress;
    value: Amount;
};
export type Erc20TransferEvent = {
    kind: EventKind.Erc20Transfer;
    walletId: EntityId;
    network: BlockchainNetwork;
    blockNumber: number;
    txHash: string;
    index?: string;
    timestamp: IsoDatetime;
    fee?: Amount;
    direction: TransferDirection;
    contract: BlockchainAddress;
    symbol?: string;
    decimals: number;
    verified?: boolean;
    from: BlockchainAddress;
    to: BlockchainAddress;
    value: Amount;
};
export type Erc721TransferEvent = {
    kind: EventKind.Erc721Transfer;
    walletId: EntityId;
    network: BlockchainNetwork;
    blockNumber: number;
    txHash: string;
    index?: string;
    timestamp: IsoDatetime;
    fee?: Amount;
    direction: TransferDirection;
    contract: BlockchainAddress;
    symbol?: string;
    verified?: boolean;
    from: BlockchainAddress;
    to: BlockchainAddress;
    tokenId: string;
};
export type PaginatedEventHistory = {
    walletId: EntityId;
    network: BlockchainNetwork;
    items: BlockchainEvent[];
    nextPageToken?: string;
};
export type TransferRequest = {
    id: EntityId;
    walletId: EntityId;
    network: BlockchainNetwork;
    txHash?: string;
    requester: RequesterIdentity;
    requestBody: TransferAssetBody;
    status: TransferStatus;
    fee?: Amount;
    error?: string;
    dateRequested: IsoDatetime;
    dateBroadcasted?: IsoDatetime;
    dateConfirmed?: IsoDatetime;
};
export type PaginatedTransferList = {
    walletId: EntityId;
    items: TransferRequest[];
    nextPageToken?: string;
};
export type TransactionRequest = {
    id: EntityId;
    walletId: EntityId;
    network: BlockchainNetwork;
    txHash?: string;
    requester: RequesterIdentity;
    requestBody: BroadcastTransactionBody;
    status: TransactionStatus;
    error?: string;
    fee?: Amount;
    dateRequested: IsoDatetime;
    dateBroadcasted?: IsoDatetime;
    dateConfirmed?: IsoDatetime;
};
export type PaginatedTransactionList = {
    walletId: EntityId;
    items: TransactionRequest[];
    nextPageToken?: string;
};
export type Signature = {
    r: string;
    s: string;
    recid?: number;
    encoded?: string;
};
export type SignatureRequest = {
    id: EntityId;
    walletId: EntityId;
    requester: RequesterIdentity;
    requestBody: GenerateSignatureBody;
    signature?: Signature;
    status: SignatureStatus;
    error?: string;
    dateRequested: IsoDatetime;
    datePolicyResolved?: IsoDatetime;
    dateSigned?: IsoDatetime;
};
export type PaginatedSignatureList = {
    walletId: EntityId;
    items: SignatureRequest[];
    nextPageToken?: string;
};
export type RequesterIdentity = {
    userId: EntityId;
    tokenId?: EntityId;
    appId?: EntityId;
};
export type CreateWalletBody = {
    network: BlockchainNetwork;
    externalId?: string;
    tags?: Tag[];
    name?: string;
};
export type TransferAssetBody = TransferNativeAsset | TransferErc20Asset | TransferErc721Asset;
export type BroadcastTransactionBody = BroadcastEvmTransaction | BroadcastEip1559Transaction | BroadcastEvmLegacyTransaction;
export type GenerateSignatureBody = SignHash | SignEip712TypedData;
export type BlockchainEvent = NativeTransferEvent | Erc20TransferEvent | Erc721TransferEvent;
export declare enum TransferKind {
    Native = "Native",
    Erc20 = "Erc20",
    Erc721 = "Erc721"
}
export declare enum TransactionKind {
    Evm = "Evm",
    Eip1559 = "Eip1559",
    EvmLegacy = "EvmLegacy"
}
export declare enum SignatureKind {
    Hash = "Hash",
    Eip712 = "Eip712"
}
export declare enum WalletStatus {
    Active = "Active",
    Creating = "Creating",
    Failed = "Failed"
}
export declare enum EventKind {
    NativeTransfer = "NativeTransfer",
    Erc20Transfer = "Erc20Transfer",
    Erc721Transfer = "Erc721Transfer"
}
export declare enum TransferDirection {
    In = "In",
    Out = "Out"
}
export declare enum TransferStatus {
    Pending = "Pending",
    Broadcasted = "Broadcasted",
    Confirmed = "Confirmed",
    Failed = "Failed"
}
export declare enum TransactionStatus {
    Pending = "Pending",
    Broadcasted = "Broadcasted",
    Confirmed = "Confirmed",
    Failed = "Failed"
}
export declare enum SignatureStatus {
    Pending = "Pending",
    Signed = "Signed",
    Confirmed = "Confirmed",
    Failed = "Failed"
}
export declare enum BlockchainNetwork {
    Bitcoin = "Bitcoin",
    BitcoinTestnet = "BitcoinTestnet",
    Bsc = "Bsc",
    BscTestnet = "BscTestnet",
    Ethereum = "Ethereum",
    EthereumGoerli = "EthereumGoerli",
    EthereumSepolia = "EthereumSepolia",
    Polygon = "Polygon",
    PolygonMumbai = "PolygonMumbai",
    Ripple = "Ripple",
    RippleTestnet = "RippleTestnet",
    Solana = "Solana",
    SolanaDevnet = "SolanaDevnet",
    Tron = "Tron",
    TronShasta = "TronShasta"
}
