export declare class DfnsError extends Error {
    name: string;
    errorName: string;
    httpStatus: number;
    shouldTriggerInvestigation: boolean;
    serviceName: string;
    causes?: string[];
    isDfnsError: boolean;
    constructor(message: string, serviceName: string, causes?: string[], shouldTriggerInvestigation?: boolean);
    toErrorObject(): {
        name: string;
        errorName: string;
        serviceName: string;
        message: string;
        causes: string[] | undefined;
        shouldTriggerInvestigation: boolean;
        httpStatus: number;
        stackTrace: string;
    };
    toString(): string;
}
export declare class ServiceUnavailableError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class NotImplementedError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class InternalServerError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class EntityExpiredError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class DuplicateError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class EntityNotFoundError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class ForbiddenError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class PaymentRequiredError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class UnauthorizedError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
export declare class BadRequestError extends DfnsError {
    name: string;
    serviceName: string;
    message: string;
    causes?: string[];
    shouldTriggerInvestigaton: boolean;
    isDfnsError: boolean;
    httpStatus: number;
    errorName: string;
}
