"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegatedCallbacksClient = void 0;
const baseAuthApi_1 = require("../../baseAuthApi");
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class DelegatedCallbacksClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createCallbackSubscriptionInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/callback-subscriptions', {
            path: {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createCallbackSubscriptionComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/callback-subscriptions', {
            path: {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getCallbackSubscriptionById(request) {
        const path = (0, url_1.buildPathAndQuery)('/callback-subscriptions/:callbackSubscriptionId', {
            path: { callbackSubscriptionId: request.callbackSubscriptionId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listCallbackSubscriptions() {
        const path = (0, url_1.buildPathAndQuery)('/callback-subscriptions', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveCallbackSubscriptionInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/callback-subscriptions/:callbackSubscriptionId', {
            path: { callbackSubscriptionId: request.callbackSubscriptionId },
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'DELETE',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async archiveCallbackSubscriptionComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/callback-subscriptions/:callbackSubscriptionId', {
            path: { callbackSubscriptionId: request.callbackSubscriptionId },
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'DELETE',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getCallbackEventById(request) {
        const path = (0, url_1.buildPathAndQuery)('/callback-events/:callbackEventId', {
            path: { callbackEventId: request.callbackEventId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listCallbackEvents() {
        const path = (0, url_1.buildPathAndQuery)('/callback-events', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.DelegatedCallbacksClient = DelegatedCallbacksClient;
