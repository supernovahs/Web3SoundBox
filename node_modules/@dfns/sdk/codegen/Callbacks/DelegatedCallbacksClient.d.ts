import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedCallbacksClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createCallbackSubscriptionInit(request: T.CreateCallbackSubscriptionRequest): Promise<UserActionChallengeResponse>;
    createCallbackSubscriptionComplete(request: T.CreateCallbackSubscriptionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateCallbackSubscriptionResponse>;
    getCallbackSubscriptionById(request: T.GetCallbackSubscriptionByIdRequest): Promise<T.GetCallbackSubscriptionByIdResponse>;
    listCallbackSubscriptions(): Promise<T.ListCallbackSubscriptionsResponse>;
    archiveCallbackSubscriptionInit(request: T.ArchiveCallbackSubscriptionRequest): Promise<UserActionChallengeResponse>;
    archiveCallbackSubscriptionComplete(request: T.ArchiveCallbackSubscriptionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchiveCallbackSubscriptionResponse>;
    getCallbackEventById(request: T.GetCallbackEventByIdRequest): Promise<T.GetCallbackEventByIdResponse>;
    listCallbackEvents(): Promise<T.ListCallbackEventsResponse>;
}
