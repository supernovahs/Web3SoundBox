import { DfnsApiClientOptions } from '../../dfnsApiClient';
import * as T from './types';
export declare class AuthClient {
    private apiOptions;
    constructor(apiOptions: DfnsApiClientOptions);
    createDelegatedUserRegistration(request: T.CreateDelegatedUserRegistrationRequest): Promise<T.CreateDelegatedUserRegistrationResponse>;
    createUserRegistration(request: T.CreateUserRegistrationRequest): Promise<T.CreateUserRegistrationResponse>;
    createDelegatedUserLogin(request: T.CreateDelegatedUserLoginRequest): Promise<T.CreateDelegatedUserLoginResponse>;
    createUserActionSignatureChallenge(request: T.CreateUserActionSignatureChallengeRequest): Promise<T.CreateUserActionSignatureChallengeResponse>;
    createUserActionSignature(request: T.CreateUserActionSignatureRequest): Promise<T.CreateUserActionSignatureResponse>;
    createUserCredentialChallenge(request: T.CreateUserCredentialChallengeRequest): Promise<T.CreateUserCredentialChallengeResponse>;
    createUserCredential(request: T.CreateUserCredentialRequest): Promise<T.CreateUserCredentialResponse>;
    activateCredential(request: T.ActivateCredentialRequest): Promise<T.ActivateCredentialResponse>;
    deactivateCredential(request: T.DeactivateCredentialRequest): Promise<T.DeactivateCredentialResponse>;
    listUserCredentials(): Promise<T.ListUserCredentialsResponse>;
    createUserActionSignatureFromCode(request: T.CreateUserActionSignatureFromCodeRequest): Promise<T.CreateUserActionSignatureFromCodeResponse>;
    createCodeUserActionSignatureChallenge(request: T.CreateCodeUserActionSignatureChallengeRequest): Promise<T.CreateCodeUserActionSignatureChallengeResponse>;
    createCodeUserActionSignature(request: T.CreateCodeUserActionSignatureRequest): Promise<T.CreateCodeUserActionSignatureResponse>;
    listPersonalAccessTokens(): Promise<T.ListPersonalAccessTokensResponse>;
    createPersonalAccessToken(request: T.CreatePersonalAccessTokenRequest): Promise<T.CreatePersonalAccessTokenResponse>;
    getPersonalAccessTokens(request: T.GetPersonalAccessTokensRequest): Promise<T.GetPersonalAccessTokensResponse>;
    updatePersonalAccessToken(request: T.UpdatePersonalAccessTokenRequest): Promise<T.UpdatePersonalAccessTokenResponse>;
    archivePersonalAccessToken(request: T.ArchivePersonalAccessTokenRequest): Promise<T.ArchivePersonalAccessTokenResponse>;
    activatePersonalAccessToken(request: T.ActivatePersonalAccessTokenRequest): Promise<T.ActivatePersonalAccessTokenResponse>;
    deactivatePersonalAccessToken(request: T.DeactivatePersonalAccessTokenRequest): Promise<T.DeactivatePersonalAccessTokenResponse>;
    listServiceAccounts(): Promise<T.ListServiceAccountsResponse>;
    createServiceAccount(request: T.CreateServiceAccountRequest): Promise<T.CreateServiceAccountResponse>;
    getServiceAccount(request: T.GetServiceAccountRequest): Promise<T.GetServiceAccountResponse>;
    updateServiceAccount(request: T.UpdateServiceAccountRequest): Promise<T.UpdateServiceAccountResponse>;
    archiveServiceAccount(request: T.ArchiveServiceAccountRequest): Promise<T.ArchiveServiceAccountResponse>;
    activateServiceAccount(request: T.ActivateServiceAccountRequest): Promise<T.ActivateServiceAccountResponse>;
    deactivateServiceAccount(request: T.DeactivateServiceAccountRequest): Promise<T.DeactivateServiceAccountResponse>;
    listUsers(): Promise<T.ListUsersResponse>;
    createUser(request: T.CreateUserRequest): Promise<T.CreateUserResponse>;
    getUser(request: T.GetUserRequest): Promise<T.GetUserResponse>;
    updateUser(request: T.UpdateUserRequest): Promise<T.UpdateUserResponse>;
    archiveUser(request: T.ArchiveUserRequest): Promise<T.ArchiveUserResponse>;
    activateUser(request: T.ActivateUserRequest): Promise<T.ActivateUserResponse>;
    deactivateUser(request: T.DeactivateUserRequest): Promise<T.DeactivateUserResponse>;
    listApplications(): Promise<T.ListApplicationsResponse>;
    createApplication(request: T.CreateApplicationRequest): Promise<T.CreateApplicationResponse>;
    getApplication(request: T.GetApplicationRequest): Promise<T.GetApplicationResponse>;
    updateApplication(request: T.UpdateApplicationRequest): Promise<T.UpdateApplicationResponse>;
    archiveApplication(request: T.ArchiveApplicationRequest): Promise<T.ArchiveApplicationResponse>;
    activateApplication(request: T.ActivateApplicationRequest): Promise<T.ActivateApplicationResponse>;
    deactivateApplication(request: T.DeactivateApplicationRequest): Promise<T.DeactivateApplicationResponse>;
    createUserRecovery(request: T.CreateUserRecoveryRequest): Promise<T.CreateUserRecoveryResponse>;
}
