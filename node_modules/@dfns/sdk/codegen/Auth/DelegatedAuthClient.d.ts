import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedAuthClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createDelegatedUserRegistrationInit(request: T.CreateDelegatedUserRegistrationRequest): Promise<UserActionChallengeResponse>;
    createDelegatedUserRegistrationComplete(request: T.CreateDelegatedUserRegistrationRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateDelegatedUserRegistrationResponse>;
    createUserRegistration(request: T.CreateUserRegistrationRequest): Promise<T.CreateUserRegistrationResponse>;
    createDelegatedUserLoginInit(request: T.CreateDelegatedUserLoginRequest): Promise<UserActionChallengeResponse>;
    createDelegatedUserLoginComplete(request: T.CreateDelegatedUserLoginRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateDelegatedUserLoginResponse>;
    createUserActionSignatureChallenge(request: T.CreateUserActionSignatureChallengeRequest): Promise<T.CreateUserActionSignatureChallengeResponse>;
    createUserActionSignature(request: T.CreateUserActionSignatureRequest): Promise<T.CreateUserActionSignatureResponse>;
    createUserCredentialChallenge(request: T.CreateUserCredentialChallengeRequest): Promise<T.CreateUserCredentialChallengeResponse>;
    createUserCredentialInit(request: T.CreateUserCredentialRequest): Promise<UserActionChallengeResponse>;
    createUserCredentialComplete(request: T.CreateUserCredentialRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateUserCredentialResponse>;
    activateCredentialInit(request: T.ActivateCredentialRequest): Promise<UserActionChallengeResponse>;
    activateCredentialComplete(request: T.ActivateCredentialRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateCredentialResponse>;
    deactivateCredentialInit(request: T.DeactivateCredentialRequest): Promise<UserActionChallengeResponse>;
    deactivateCredentialComplete(request: T.DeactivateCredentialRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateCredentialResponse>;
    listUserCredentials(): Promise<T.ListUserCredentialsResponse>;
    createUserActionSignatureFromCode(request: T.CreateUserActionSignatureFromCodeRequest): Promise<T.CreateUserActionSignatureFromCodeResponse>;
    createCodeUserActionSignatureChallenge(request: T.CreateCodeUserActionSignatureChallengeRequest): Promise<T.CreateCodeUserActionSignatureChallengeResponse>;
    createCodeUserActionSignature(request: T.CreateCodeUserActionSignatureRequest): Promise<T.CreateCodeUserActionSignatureResponse>;
    listPersonalAccessTokens(): Promise<T.ListPersonalAccessTokensResponse>;
    createPersonalAccessTokenInit(request: T.CreatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    createPersonalAccessTokenComplete(request: T.CreatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePersonalAccessTokenResponse>;
    getPersonalAccessTokens(request: T.GetPersonalAccessTokensRequest): Promise<T.GetPersonalAccessTokensResponse>;
    updatePersonalAccessTokenInit(request: T.UpdatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    updatePersonalAccessTokenComplete(request: T.UpdatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdatePersonalAccessTokenResponse>;
    archivePersonalAccessTokenInit(request: T.ArchivePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    archivePersonalAccessTokenComplete(request: T.ArchivePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePersonalAccessTokenResponse>;
    activatePersonalAccessTokenInit(request: T.ActivatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    activatePersonalAccessTokenComplete(request: T.ActivatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivatePersonalAccessTokenResponse>;
    deactivatePersonalAccessTokenInit(request: T.DeactivatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    deactivatePersonalAccessTokenComplete(request: T.DeactivatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivatePersonalAccessTokenResponse>;
    listServiceAccounts(): Promise<T.ListServiceAccountsResponse>;
    createServiceAccountInit(request: T.CreateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    createServiceAccountComplete(request: T.CreateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateServiceAccountResponse>;
    getServiceAccount(request: T.GetServiceAccountRequest): Promise<T.GetServiceAccountResponse>;
    updateServiceAccountInit(request: T.UpdateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    updateServiceAccountComplete(request: T.UpdateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateServiceAccountResponse>;
    archiveServiceAccountInit(request: T.ArchiveServiceAccountRequest): Promise<UserActionChallengeResponse>;
    archiveServiceAccountComplete(request: T.ArchiveServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchiveServiceAccountResponse>;
    activateServiceAccountInit(request: T.ActivateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    activateServiceAccountComplete(request: T.ActivateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateServiceAccountResponse>;
    deactivateServiceAccountInit(request: T.DeactivateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    deactivateServiceAccountComplete(request: T.DeactivateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateServiceAccountResponse>;
    listUsers(): Promise<T.ListUsersResponse>;
    createUserInit(request: T.CreateUserRequest): Promise<UserActionChallengeResponse>;
    createUserComplete(request: T.CreateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateUserResponse>;
    getUser(request: T.GetUserRequest): Promise<T.GetUserResponse>;
    updateUserInit(request: T.UpdateUserRequest): Promise<UserActionChallengeResponse>;
    updateUserComplete(request: T.UpdateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateUserResponse>;
    archiveUserInit(request: T.ArchiveUserRequest): Promise<UserActionChallengeResponse>;
    archiveUserComplete(request: T.ArchiveUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchiveUserResponse>;
    activateUserInit(request: T.ActivateUserRequest): Promise<UserActionChallengeResponse>;
    activateUserComplete(request: T.ActivateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateUserResponse>;
    deactivateUserInit(request: T.DeactivateUserRequest): Promise<UserActionChallengeResponse>;
    deactivateUserComplete(request: T.DeactivateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateUserResponse>;
    listApplications(): Promise<T.ListApplicationsResponse>;
    createApplicationInit(request: T.CreateApplicationRequest): Promise<UserActionChallengeResponse>;
    createApplicationComplete(request: T.CreateApplicationRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateApplicationResponse>;
    getApplication(request: T.GetApplicationRequest): Promise<T.GetApplicationResponse>;
    updateApplicationInit(request: T.UpdateApplicationRequest): Promise<UserActionChallengeResponse>;
    updateApplicationComplete(request: T.UpdateApplicationRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateApplicationResponse>;
    archiveApplicationInit(request: T.ArchiveApplicationRequest): Promise<UserActionChallengeResponse>;
    archiveApplicationComplete(request: T.ArchiveApplicationRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchiveApplicationResponse>;
    activateApplicationInit(request: T.ActivateApplicationRequest): Promise<UserActionChallengeResponse>;
    activateApplicationComplete(request: T.ActivateApplicationRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateApplicationResponse>;
    deactivateApplicationInit(request: T.DeactivateApplicationRequest): Promise<UserActionChallengeResponse>;
    deactivateApplicationComplete(request: T.DeactivateApplicationRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateApplicationResponse>;
    createUserRecovery(request: T.CreateUserRecoveryRequest): Promise<T.CreateUserRecoveryResponse>;
}
