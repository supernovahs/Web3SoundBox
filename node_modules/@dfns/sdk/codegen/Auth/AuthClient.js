"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthClient = void 0;
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class AuthClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createDelegatedUserRegistration(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/delegated', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserRegistration(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createDelegatedUserLogin(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/delegated', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserActionSignatureChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action/init', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserActionSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserCredentialChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/init', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserCredential(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateCredential(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/activate', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateCredential(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/deactivate', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listUserCredentials() {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserActionSignatureFromCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action/code/verify', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCodeUserActionSignatureChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action/code/init', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCodeUserActionSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action/code', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listPersonalAccessTokens() {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createPersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPersonalAccessTokens(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: { tokenId: request.tokenId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updatePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: { tokenId: request.tokenId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archivePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: { tokenId: request.tokenId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activatePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/activate', {
            path: { tokenId: request.tokenId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivatePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/deactivate', {
            path: { tokenId: request.tokenId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listServiceAccounts() {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: { serviceAccountId: request.serviceAccountId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: { serviceAccountId: request.serviceAccountId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: { serviceAccountId: request.serviceAccountId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/activate', {
            path: { serviceAccountId: request.serviceAccountId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/deactivate', {
            path: { serviceAccountId: request.serviceAccountId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listUsers() {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: { userId: request.userId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: { userId: request.userId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: { userId: request.userId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/activate', {
            path: { userId: request.userId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/deactivate', {
            path: { userId: request.userId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listApplications() {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId', {
            path: { appId: request.appId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId', {
            path: { appId: request.appId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId', {
            path: { appId: request.appId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId/activate', {
            path: { appId: request.appId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId/deactivate', {
            path: { appId: request.appId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserRecovery(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.AuthClient = AuthClient;
