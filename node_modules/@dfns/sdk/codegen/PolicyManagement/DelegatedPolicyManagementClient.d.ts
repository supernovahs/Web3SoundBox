import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedPolicyManagementClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createPolicyInit(request: T.CreatePolicyRequest): Promise<UserActionChallengeResponse>;
    createPolicyComplete(request: T.CreatePolicyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePolicyResponse>;
    getPolicyById(request: T.GetPolicyByIdRequest): Promise<T.GetPolicyByIdResponse>;
    listPolicies(): Promise<T.ListPoliciesResponse>;
    archivePolicyInit(request: T.ArchivePolicyRequest): Promise<UserActionChallengeResponse>;
    archivePolicyComplete(request: T.ArchivePolicyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePolicyResponse>;
    createPolicyControlInit(request: T.CreatePolicyControlRequest): Promise<UserActionChallengeResponse>;
    createPolicyControlComplete(request: T.CreatePolicyControlRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePolicyControlResponse>;
    getPolicyControlById(request: T.GetPolicyControlByIdRequest): Promise<T.GetPolicyControlByIdResponse>;
    listPolicyControls(): Promise<T.ListPolicyControlsResponse>;
    archivePolicyControlInit(request: T.ArchivePolicyControlRequest): Promise<UserActionChallengeResponse>;
    archivePolicyControlComplete(request: T.ArchivePolicyControlRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePolicyControlResponse>;
    createPolicyRuleInit(request: T.CreatePolicyRuleRequest): Promise<UserActionChallengeResponse>;
    createPolicyRuleComplete(request: T.CreatePolicyRuleRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePolicyRuleResponse>;
    getPolicyRuleById(request: T.GetPolicyRuleByIdRequest): Promise<T.GetPolicyRuleByIdResponse>;
    listPolicyRules(request: T.ListPolicyRulesRequest): Promise<T.ListPolicyRulesResponse>;
    archivePolicyRuleInit(request: T.ArchivePolicyRuleRequest): Promise<UserActionChallengeResponse>;
    archivePolicyRuleComplete(request: T.ArchivePolicyRuleRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePolicyRuleResponse>;
}
