"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyManagementClient = void 0;
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class PolicyManagementClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createPolicy(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPolicyById(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/:policyId', {
            path: { policyId: request.policyId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listPolicies() {
        const path = (0, url_1.buildPathAndQuery)('/policies', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archivePolicy(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/:policyId', {
            path: { policyId: request.policyId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createPolicyControl(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-controls', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPolicyControlById(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-controls/:policyControlId', {
            path: { policyControlId: request.policyControlId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listPolicyControls() {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-controls', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archivePolicyControl(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-controls/:policyControlId', {
            path: { policyControlId: request.policyControlId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createPolicyRule(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-rules', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPolicyRuleById(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-rules/:policyRuleId', {
            path: { policyRuleId: request.policyRuleId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listPolicyRules(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-rules', {
            path: {},
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archivePolicyRule(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-rules/:policyRuleId', {
            path: { policyRuleId: request.policyRuleId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'DELETE',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.PolicyManagementClient = PolicyManagementClient;
