"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegatedWalletsClient = void 0;
const baseAuthApi_1 = require("../../baseAuthApi");
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class DelegatedWalletsClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createWalletInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets', {
            path: {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createWalletComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/wallets', {
            path: {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getWallet(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId', {
            path: { walletId: request.walletId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getWalletAssets(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/assets', {
            path: { walletId: request.walletId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getWalletNfts(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/nfts', {
            path: { walletId: request.walletId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listWallets(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/wallets', {
            path: {},
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getWalletHistory(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/history', {
            path: { walletId: request.walletId },
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async transferAssetInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transfers', {
            path: { walletId: request.walletId },
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async transferAssetComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transfers', {
            path: { walletId: request.walletId },
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getTransfer(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transfers/:transferId', {
            path: { walletId: request.walletId, transferId: request.transferId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listTransfers(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transfers', {
            path: { walletId: request.walletId },
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async broadcastTransactionInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transactions', {
            path: { walletId: request.walletId },
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async broadcastTransactionComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transactions', {
            path: { walletId: request.walletId },
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getTransaction(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transactions/:transactionId', {
            path: {
                walletId: request.walletId,
                transactionId: request.transactionId,
            },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listTransactions(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/transactions', {
            path: { walletId: request.walletId },
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async generateSignatureInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/signatures', {
            path: { walletId: request.walletId },
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async generateSignatureComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/signatures', {
            path: { walletId: request.walletId },
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/signatures/:signatureId', {
            path: { walletId: request.walletId, signatureId: request.signatureId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listSignatures(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/wallets/:walletId/signatures', {
            path: { walletId: request.walletId },
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.DelegatedWalletsClient = DelegatedWalletsClient;
