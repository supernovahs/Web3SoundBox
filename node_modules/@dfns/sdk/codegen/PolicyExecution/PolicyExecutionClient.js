"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyExecutionClient = void 0;
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class PolicyExecutionClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async listPolicyControlExecutions(request) {
        var _a;
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-control-executions', {
            path: {},
            query: (_a = request.query) !== null && _a !== void 0 ? _a : {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPolicyControlExecutionById(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-control-executions/:policyControlExecutionId', {
            path: { policyControlExecutionId: request.policyControlExecutionId },
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updatePolicyControlExecution(request) {
        const path = (0, url_1.buildPathAndQuery)('/policies/policy-control-executions/:policyControlExecutionId', {
            path: { policyControlExecutionId: request.policyControlExecutionId },
            query: {},
        });
        const response = await (0, fetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.PolicyExecutionClient = PolicyExecutionClient;
