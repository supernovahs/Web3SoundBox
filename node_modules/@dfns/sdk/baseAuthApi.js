"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAuthApi = void 0;
const fetch_1 = require("./utils/fetch");
class BaseAuthApi {
    /**
     * Creates a user action challenge
     */
    static async createUserActionChallenge(request, options) {
        const response = await (0, fetch_1.simpleFetch)('/auth/action/init', {
            method: 'POST',
            body: request,
            apiOptions: options,
        });
        return response.json();
    }
    /**
     * Sign a user action challenge
     */
    static async signUserActionChallenge(request, options) {
        const response = await (0, fetch_1.simpleFetch)('/auth/action', {
            method: 'POST',
            body: request,
            apiOptions: options,
        });
        return response.json();
    }
    /**
     * Initiates user login, by creating a challenge that will need to be signed by the user Credentials.
     */
    static async createUserLoginChallenge(request, options) {
        const response = await (0, fetch_1.simpleFetch)('/auth/login/init', {
            method: 'POST',
            body: request,
            apiOptions: options,
        });
        return response.json();
    }
    /**
     * Completes user login by sending the signed login challenge.
     */
    static async createUserLogin(request, options) {
        const response = await (0, fetch_1.simpleFetch)('/auth/login', {
            method: 'POST',
            body: request,
            apiOptions: options,
        });
        return response.json();
    }
    /**
     * Initiates Registration by creating a challenge that will need to be signed by a new set of Credentials.
     */
    static async createUserRegistrationChallenge(request, options) {
        const response = await (0, fetch_1.simpleFetch)('/auth/registration/init', {
            method: 'POST',
            body: request,
            apiOptions: options,
        });
        return response.json();
    }
    /**
     * Completes Registration by sending the signed registration challenge, containing the new Credential identity created.
     */
    static async createUserRegistration(request, options) {
        const response = await (0, fetch_1.simpleFetch)('/auth/registration', {
            method: 'POST',
            body: request,
            apiOptions: options,
        });
        return response.json();
    }
}
exports.BaseAuthApi = BaseAuthApi;
