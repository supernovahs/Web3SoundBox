import type { AbiEventParameter, AbiParameter } from '../abi.js';
import type { Join } from '../types.js';
/**
 * Formats {@link AbiParameter} to human-readable ABI parameter.
 *
 * @param TAbiParameter - ABI parameter
 * @returns Human-readable ABI parameter
 *
 * @example
 * type Result = FormatAbiParameter<{ type: 'address'; name: 'from'; }>
 * //   ^? type Result = 'address from'
 */
export type FormatAbiParameter<TAbiParameter extends AbiParameter | AbiEventParameter> = TAbiParameter extends {
    name?: infer Name extends string;
    type: `tuple${infer Array}`;
    components: infer Components extends readonly AbiParameter[];
    indexed?: infer Indexed extends boolean;
} ? FormatAbiParameter<{
    type: `(${Join<{
        [K in keyof Components]: FormatAbiParameter<Components[K]>;
    }, ', '>})${Array}`;
    indexed?: Indexed;
} & (string extends Name ? unknown : {
    name: Name;
})> : `${TAbiParameter['type']}${TAbiParameter extends {
    indexed: true;
} ? ' indexed' : ''}${TAbiParameter['name'] extends infer Name extends string ? ` ${Name}` : ''}`;
/**
 * Formats {@link AbiParameter} to human-readable ABI parameter.
 *
 * @param abiParameter - ABI parameter
 * @returns Human-readable ABI parameter
 *
 * @example
 * const result = formatAbiParameter({ type: 'address', name: 'from' })
 * //    ^? const result: 'address from'
 */
export declare function formatAbiParameter<const TAbiParameter extends AbiParameter | AbiEventParameter>(abiParameter: TAbiParameter): FormatAbiParameter<TAbiParameter>;
//# sourceMappingURL=formatAbiParameter.d.ts.map