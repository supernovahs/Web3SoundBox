"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.estimateTxGas = exports.estimateGas = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
const safe_core_sdk_types_1 = require("@safe-global/safe-core-sdk-types");
const safeDeploymentContracts_1 = require("../../contracts/safeDeploymentContracts");
function estimateDataGasCosts(data) {
    const reducer = (accumulator, currentValue) => {
        if (currentValue === '0x') {
            return accumulator + 0;
        }
        if (currentValue === '00') {
            return accumulator + 4;
        }
        return accumulator + 16;
    };
    return data.match(/.{2}/g).reduce(reducer, 0);
}
async function estimateGas(safeVersion, safeContract, ethAdapter, to, valueInWei, data, operation, customContracts) {
    var _a;
    const chainId = await ethAdapter.getChainId();
    const simulateTxAccessorContract = await (0, safeDeploymentContracts_1.getSimulateTxAccessorContract)({
        ethAdapter,
        safeVersion,
        customContracts: customContracts === null || customContracts === void 0 ? void 0 : customContracts[chainId]
    });
    const transactionDataToEstimate = simulateTxAccessorContract.encode('simulate', [
        to,
        valueInWei,
        data,
        operation
    ]);
    const safeFunctionToEstimate = safeContract.encode('simulateAndRevert', [
        await simulateTxAccessorContract.getAddress(),
        transactionDataToEstimate
    ]);
    const safeAddress = safeContract.getAddress();
    const transactionToEstimateGas = {
        to: safeAddress,
        value: '0',
        data: safeFunctionToEstimate,
        from: safeAddress
    };
    // TO-DO: Improve decoding
    /*
    const simulateAndRevertResponse = ethAdapter.decodeParameters(
      ['bool', 'bytes'],
      encodedResponse
    )
    const returnedData = ethAdapter.decodeParameters(['uint256', 'bool', 'bytes'], simulateAndRevertResponse[1])
    */
    try {
        const encodedResponse = await ethAdapter.call(transactionToEstimateGas);
        return Number('0x' + encodedResponse.slice(184).slice(0, 10)).toString();
    }
    catch (error) {
        // Ethers
        if ((_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.body) {
            const revertData = JSON.parse(error.error.body).error.data;
            if (revertData && revertData.startsWith('Reverted ')) {
                const [, encodedResponse] = revertData.split('Reverted ');
                const safeTxGas = Number('0x' + encodedResponse.slice(184).slice(0, 10)).toString();
                return safeTxGas;
            }
        }
        // Web3
        const [, encodedResponse] = error.message.split('return data: ');
        const safeTxGas = Number('0x' + encodedResponse.slice(184).slice(0, 10)).toString();
        return safeTxGas;
    }
}
exports.estimateGas = estimateGas;
async function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {
    let txGasEstimation = bignumber_1.BigNumber.from(0);
    const safeAddress = safeContract.getAddress();
    const estimateData = safeContract.encode('requiredTxGas', [
        to,
        valueInWei,
        data,
        operation
    ]);
    try {
        const estimateResponse = await ethAdapter.estimateGas({
            to: safeAddress,
            from: safeAddress,
            data: estimateData
        });
        txGasEstimation = bignumber_1.BigNumber.from('0x' + estimateResponse.substring(138)).add(10000);
    }
    catch (error) { }
    if (txGasEstimation.gt(0)) {
        const dataGasEstimation = estimateDataGasCosts(estimateData);
        let additionalGas = 10000;
        for (let i = 0; i < 10; i++) {
            try {
                const estimateResponse = await ethAdapter.call({
                    to: safeAddress,
                    from: safeAddress,
                    data: estimateData,
                    gasPrice: '0',
                    gasLimit: txGasEstimation.add(dataGasEstimation).add(additionalGas).toString()
                });
                if (estimateResponse !== '0x') {
                    break;
                }
            }
            catch (error) { }
            txGasEstimation = txGasEstimation.add(additionalGas);
            additionalGas *= 2;
        }
        return txGasEstimation.add(additionalGas).toString();
    }
    try {
        const estimateGas = await ethAdapter.estimateGas({
            to,
            from: safeAddress,
            value: valueInWei,
            data
        });
        return estimateGas;
    }
    catch (error) {
        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {
            return '0';
        }
        return Promise.reject(error);
    }
}
exports.estimateTxGas = estimateTxGas;
//# sourceMappingURL=gas.js.map