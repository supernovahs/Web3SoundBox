import React from 'react';
export declare function TransactionStoreProvider({ children, }: {
    children: React.ReactNode;
}): React.JSX.Element;
export declare function useTransactionStore(): {
    addTransaction: (account: string, chainId: number, transaction: import("./transactionStore").NewTransaction) => void;
    clearTransactions: (account: string, chainId: number) => void;
    getTransactions: (account: string, chainId: number) => import("./transactionStore").Transaction[];
    onChange: (fn: () => void) => () => void;
    setProvider: (newProvider: {
        account: undefined;
        batch?: {
            multicall?: boolean | import("viem").MulticallBatchOptions | undefined;
        } | undefined;
        chain: any;
        key: string;
        name: string;
        pollingInterval: number;
        request: import("viem").EIP1193RequestFn<import("viem").PublicRpcSchema>;
        transport: import("viem").TransportConfig<string, import("viem").EIP1193RequestFn> & Record<string, any>;
        type: string;
        uid: string;
        extend: <TNextExtended extends {
            account?: undefined;
            batch?: undefined;
            chain?: undefined;
            key?: undefined;
            name?: undefined;
            pollingInterval?: undefined;
            request?: undefined;
            transport?: undefined;
            type?: undefined;
            uid?: undefined;
        } & {
            [key: string]: unknown;
        } = {
            account?: undefined;
            batch?: undefined;
            chain?: undefined;
            key?: undefined;
            name?: undefined;
            pollingInterval?: undefined;
            request?: undefined;
            transport?: undefined;
            type?: undefined;
            uid?: undefined;
        } & {
            [key: string]: unknown;
        }>(fn: (client: import("viem").Client<import("viem").Transport, any, undefined, import("viem").PublicRpcSchema, import("viem").PublicActions<import("viem").Transport, any>>) => Narrow<TNextExtended_1>) => never;
        call: (parameters: import("viem").CallParameters<any>) => Promise<import("viem").CallReturnType>;
        createBlockFilter: () => Promise<{
            id: `0x${string}`;
            request: import("viem").EIP1193RequestFn<readonly [{
                Method: "eth_getFilterChanges";
                Parameters: [filterId: `0x${string}`];
                ReturnType: import("viem").RpcLog[] | `0x${string}`[];
            }, {
                Method: "eth_getFilterLogs";
                Parameters: [filterId: `0x${string}`];
                ReturnType: import("viem").RpcLog[];
            }, {
                Method: "eth_uninstallFilter";
                Parameters: [filterId: `0x${string}`];
                ReturnType: boolean;
            }]>;
            type: "block";
        }>;
        createContractEventFilter: <TAbi extends unknown, TEventName extends string | undefined, TArgs extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined, TStrict extends boolean | undefined = undefined>(args: import("viem").CreateContractEventFilterParameters<TAbi, TEventName, TArgs, TStrict>) => Promise<import("viem").CreateContractEventFilterReturnType<TAbi, TEventName, TArgs, TStrict>>;
        createEventFilter: <TAbiEvent extends unknown, TStrict_1 extends boolean | undefined = undefined, _Abi extends unknown = [TAbiEvent], _EventName extends string | undefined = import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent>, _Args extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<_Abi, _EventName> | undefined = undefined>(args?: import("viem").CreateEventFilterParameters<TAbiEvent, TStrict_1, _Abi, _EventName, _Args> | undefined) => Promise<import("viem/dist/types/types/filter").Filter<"event", _Abi, _EventName, _Args, TStrict_1> extends infer T ? { [K in keyof T]: import("viem/dist/types/types/filter").Filter<"event", _Abi, _EventName, _Args, TStrict_1>[K]; } : never>;
        createPendingTransactionFilter: () => Promise<{
            id: `0x${string}`;
            request: import("viem").EIP1193RequestFn<readonly [{
                Method: "eth_getFilterChanges";
                Parameters: [filterId: `0x${string}`];
                ReturnType: import("viem").RpcLog[] | `0x${string}`[];
            }, {
                Method: "eth_getFilterLogs";
                Parameters: [filterId: `0x${string}`];
                ReturnType: import("viem").RpcLog[];
            }, {
                Method: "eth_uninstallFilter";
                Parameters: [filterId: `0x${string}`];
                ReturnType: boolean;
            }]>;
            type: "transaction";
        }>;
        estimateContractGas: <TChain extends unknown, TAbi_1 extends unknown, TFunctionName extends string>(args: import("viem").EstimateContractGasParameters<TAbi_1, TFunctionName, TChain, import("viem").Account | undefined>) => Promise<bigint>;
        estimateGas: (args: import("viem").EstimateGasParameters<any, import("viem").Account | undefined>) => Promise<bigint>;
        getBalance: (args: import("viem").GetBalanceParameters) => Promise<bigint>;
        getBlock: (args?: import("viem").GetBlockParameters | undefined) => Promise<import("viem").Block>;
        getBlockNumber: (args?: import("viem").GetBlockNumberParameters | undefined) => Promise<bigint>;
        getBlockTransactionCount: (args?: import("viem").GetBlockTransactionCountParameters | undefined) => Promise<number>;
        getBytecode: (args: import("viem").GetBytecodeParameters) => Promise<import("viem").GetBytecodeReturnType>;
        getChainId: () => Promise<number>;
        getEnsAddress: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: any;
        }) => Promise<any>;
        getEnsAvatar: (args: {
            name: string;
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            universalResolverAddress?: any;
            gatewayUrls?: import("viem").AssetGatewayUrls | undefined;
        }) => Promise<import("viem/ens").GetEnsAvatarReturnType>;
        getEnsName: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            address: Address;
            universalResolverAddress?: any;
        }) => Promise<import("viem").GetEnsNameReturnType>;
        getEnsResolver: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: any;
        }) => Promise<Address>;
        getEnsText: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            key: string;
            universalResolverAddress?: any;
        }) => Promise<import("viem/ens").GetEnsTextReturnType>;
        getFeeHistory: (args: import("viem").GetFeeHistoryParameters) => Promise<import("viem").GetFeeHistoryReturnType>;
        getFilterChanges: <TFilterType extends import("viem/dist/types/types/filter").FilterType, TAbi_2 extends unknown, TEventName_1 extends string | undefined, TStrict_2 extends boolean | undefined = undefined>(args: import("viem").GetFilterChangesParameters<TFilterType, TAbi_2, TEventName_1, TStrict_2>) => Promise<import("viem").GetFilterChangesReturnType<TFilterType, TAbi_2, TEventName_1, TStrict_2>>;
        getFilterLogs: <TAbi_3 extends unknown, TEventName_2 extends string | undefined, TStrict_3 extends boolean | undefined = undefined>(args: import("viem").GetFilterLogsParameters<TAbi_3, TEventName_2, TStrict_3>) => Promise<import("viem").GetFilterLogsReturnType<TAbi_3, TEventName_2, TStrict_3>>;
        getGasPrice: () => Promise<bigint>;
        getLogs: <TAbiEvent_1 extends unknown, TStrict_4 extends boolean | undefined = undefined>(args?: import("viem").GetLogsParameters<TAbiEvent_1, TStrict_4> | undefined) => Promise<import("viem").GetLogsReturnType<TAbiEvent_1, TStrict_4>>;
        getStorageAt: (args: import("viem").GetStorageAtParameters) => Promise<import("viem").GetStorageAtReturnType>;
        getTransaction: (args: import("viem").GetTransactionParameters) => Promise<import("viem").Transaction>;
        getTransactionConfirmations: (args: import("viem").GetTransactionConfirmationsParameters<any>) => Promise<bigint>;
        getTransactionCount: (args: import("viem").GetTransactionCountParameters) => Promise<number>;
        getTransactionReceipt: (args: import("viem").GetTransactionReceiptParameters) => Promise<import("viem").TransactionReceipt>;
        multicall: <TContracts extends import("viem").ContractFunctionConfig[], TAllowFailure extends boolean = true>(args: import("viem").MulticallParameters<TContracts, TAllowFailure>) => Promise<import("viem").MulticallReturnType<TContracts, TAllowFailure>>;
        readContract: <TAbi_4 extends unknown, TFunctionName_1 extends string>(args: import("viem").ReadContractParameters<TAbi_4, TFunctionName_1>) => Promise<unknown>;
        simulateContract: <TAbi_5 extends unknown = Abi, TFunctionName_2 extends string = any, TChainOverride extends unknown = undefined>(args: import("viem").SimulateContractParameters<TAbi_5, TFunctionName_2, any, TChainOverride>) => Promise<import("viem").SimulateContractReturnType<TAbi_5, TFunctionName_2, any, TChainOverride>>;
        verifyMessage: (args: import("viem/dist/types/actions/public/verifyMessage").VerifyMessageParameters) => Promise<boolean>;
        verifyTypedData: (args: import("viem/dist/types/actions/public/verifyTypedData").VerifyTypedDataParameters) => Promise<boolean>;
        uninstallFilter: (args: import("viem").UninstallFilterParameters) => Promise<boolean>;
        waitForTransactionReceipt: (args: import("viem").WaitForTransactionReceiptParameters<any>) => Promise<import("viem").TransactionReceipt>;
        watchBlockNumber: (args: import("viem").WatchBlockNumberParameters) => import("viem").WatchBlockNumberReturnType;
        watchBlocks: (args: import("viem").WatchBlocksParameters<import("viem").Transport, any>) => import("viem").WatchBlocksReturnType;
        watchContractEvent: <TAbi_6 extends unknown, TEventName_3 extends string, TStrict_5 extends boolean | undefined = undefined>(args: import("viem").WatchContractEventParameters<TAbi_6, TEventName_3, TStrict_5>) => import("viem").WatchContractEventReturnType;
        watchEvent: <TAbiEvent_2 extends unknown, TStrict_6 extends boolean | undefined = undefined>(args: import("viem").WatchEventParameters<TAbiEvent_2, TStrict_6>) => import("viem").WatchEventReturnType;
        watchPendingTransactions: (args: import("viem").WatchPendingTransactionsParameters<import("viem").Transport>) => import("viem").WatchPendingTransactionsReturnType;
    }) => void;
    waitForPendingTransactions: (account: string, chainId: number) => Promise<void>;
};
