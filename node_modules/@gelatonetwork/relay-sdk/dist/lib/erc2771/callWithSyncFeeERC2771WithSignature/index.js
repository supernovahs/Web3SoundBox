"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callWithSyncFeeERC2771WithSignature = void 0;
const utils_1 = require("../../../utils");
const network_1 = require("../../network");
const types_1 = require("../../types");
const callWithSyncFeeERC2771WithSignature = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        const { signature, struct, syncFeeParams, options } = payload;
        const isSupported = yield (0, network_1.isNetworkSupported)({ chainId: Number(struct.chainId) }, config);
        if (!isSupported) {
            throw new Error(`Chain id [${struct.chainId}] is not supported`);
        }
        return yield (0, utils_1.post)({
            relayCall: types_1.RelayCall.CallWithSyncFeeERC2771,
            request: Object.assign(Object.assign(Object.assign(Object.assign({}, struct), syncFeeParams), options), { isRelayContext: (_a = syncFeeParams.isRelayContext) !== null && _a !== void 0 ? _a : true, userSignature: signature }),
        }, config);
    }
    catch (error) {
        const errorMessage = error.message;
        throw new Error(`GelatoRelaySDK/callWithSyncFeeERC2771WithSignature: Failed with error: ${errorMessage}`);
    }
});
exports.callWithSyncFeeERC2771WithSignature = callWithSyncFeeERC2771WithSignature;
