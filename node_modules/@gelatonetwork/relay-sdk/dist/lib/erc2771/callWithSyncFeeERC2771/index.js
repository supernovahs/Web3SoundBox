"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.relayWithCallWithSyncFeeERC2771 = void 0;
const utils_1 = require("../../../utils");
const network_1 = require("../../network");
const types_1 = require("../../types");
const types_2 = require("../types");
const utils_2 = require("../utils");
const relayWithCallWithSyncFeeERC2771 = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { request, walletOrProvider, options } = payload;
        if (!walletOrProvider.provider) {
            throw new Error(`Missing provider`);
        }
        const isSupported = yield (0, network_1.isNetworkSupported)({ chainId: Number(request.chainId) }, config);
        if (!isSupported) {
            throw new Error(`Chain id [${request.chainId}] is not supported`);
        }
        const { isRelayContext, feeToken } = request, callWithSyncFeeRequest = __rest(request, ["isRelayContext", "feeToken"]);
        const parametersToOverride = yield (0, utils_1.populateOptionalUserParameters)({ request: callWithSyncFeeRequest, walletOrProvider }, config);
        const struct = yield (0, utils_2.mapRequestToStruct)(callWithSyncFeeRequest, parametersToOverride);
        const signature = yield (0, utils_1.signTypedDataV4)(walletOrProvider, callWithSyncFeeRequest.user, (0, utils_2.getPayloadToSign)({
            struct,
            type: types_2.ERC2771Type.CallWithSyncFee,
            isWallet: (0, utils_1.isWallet)(walletOrProvider),
        }, config));
        return yield (0, utils_1.post)({
            relayCall: types_1.RelayCall.CallWithSyncFeeERC2771,
            request: Object.assign(Object.assign(Object.assign({}, struct), options), { feeToken, isRelayContext: isRelayContext !== null && isRelayContext !== void 0 ? isRelayContext : true, userSignature: signature }),
        }, config);
    }
    catch (error) {
        const errorMessage = error.message;
        throw new Error(`GelatoRelaySDK/callWithSyncFeeERC2771: Failed with error: ${errorMessage}`);
    }
});
exports.relayWithCallWithSyncFeeERC2771 = relayWithCallWithSyncFeeERC2771;
