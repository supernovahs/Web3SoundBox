"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEstimatedFee = exports.getPaymentTokens = exports.getGelatoOracles = exports.isOracleActive = void 0;
const axios_1 = __importDefault(require("axios"));
const ethers_1 = require("ethers");
const utils_1 = require("../../utils");
const isOracleActive = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    const oracles = yield (0, exports.getGelatoOracles)(config);
    return oracles.includes(payload.chainId.toString());
});
exports.isOracleActive = isOracleActive;
const getGelatoOracles = (config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return (yield axios_1.default.get(`${config.url}/oracles/`)).data.oracles;
    }
    catch (error) {
        throw new Error(`GelatoRelaySDK/getGelatoOracles: Failed with error: ${(0, utils_1.getHttpErrorMessage)(error)}`);
    }
});
exports.getGelatoOracles = getGelatoOracles;
const getPaymentTokens = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return (yield axios_1.default.get(`${config.url}/oracles/${payload.chainId}/paymentTokens/`)).data.paymentTokens;
    }
    catch (error) {
        throw new Error(`GelatoRelaySDK/getPaymentTokens: Failed with error: ${(0, utils_1.getHttpErrorMessage)(error)}`);
    }
});
exports.getPaymentTokens = getPaymentTokens;
const getEstimatedFee = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    const { chainId, gasLimit, gasLimitL1, isHighPriority, paymentToken } = payload;
    const params = {
        paymentToken,
        gasLimit: gasLimit.toString(),
        isHighPriority,
        gasLimitL1: gasLimitL1.toString(),
    };
    try {
        const res = yield axios_1.default.get(`${config.url}/oracles/${chainId}/estimate`, {
            params,
        });
        return ethers_1.BigNumber.from(res.data.estimatedFee);
    }
    catch (error) {
        throw new Error(`GelatoRelaySDK/getEstimatedFee: Failed with error: ${(0, utils_1.getHttpErrorMessage)(error)}`);
    }
});
exports.getEstimatedFee = getEstimatedFee;
