"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.relayWithSponsoredCall = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const utils_2 = require("../../utils");
const network_1 = require("../network");
const types_1 = require("../types");
const relayWithSponsoredCall = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    return yield sponsoredCall(payload, config);
});
exports.relayWithSponsoredCall = relayWithSponsoredCall;
const mapRequestToStruct = (request) => __awaiter(void 0, void 0, void 0, function* () {
    return {
        chainId: ethers_1.BigNumber.from(request.chainId).toString(),
        target: (0, utils_1.getAddress)(request.target),
        data: request.data,
    };
});
const sponsoredCall = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { request, sponsorApiKey, options } = payload;
        const isSupported = yield (0, network_1.isNetworkSupported)({ chainId: Number(request.chainId) }, config);
        if (!isSupported) {
            throw new Error(`Chain id [${request.chainId}] is not supported`);
        }
        const struct = yield mapRequestToStruct(request);
        const postResponse = yield (0, utils_2.post)({
            relayCall: types_1.RelayCall.SponsoredCall,
            request: Object.assign(Object.assign(Object.assign({}, struct), options), { sponsorApiKey }),
        }, config);
        return postResponse;
    }
    catch (error) {
        const errorMessage = error.message;
        throw new Error(`GelatoRelaySDK/sponsoredCall: Failed with error: ${errorMessage}`);
    }
});
