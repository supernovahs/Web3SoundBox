"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GelatoRelay_config;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GelatoRelay = exports.ERC2771Type = void 0;
const ethers_1 = require("ethers");
const library = __importStar(require("./lib"));
const types_1 = require("./lib/erc2771/types");
Object.defineProperty(exports, "ERC2771Type", { enumerable: true, get: function () { return types_1.ERC2771Type; } });
const constants_1 = require("./constants");
class GelatoRelay {
    constructor(config) {
        _GelatoRelay_config.set(this, void 0);
        /**
         * @param {Config} config Configuration
         */
        this.configure = (config) => {
            __classPrivateFieldSet(this, _GelatoRelay_config, this._getConfiguration(config), "f");
        };
        this._getConfiguration = (config) => {
            var _a, _b, _c;
            return {
                url: (_a = config === null || config === void 0 ? void 0 : config.url) !== null && _a !== void 0 ? _a : constants_1.GELATO_RELAY_URL,
                contract: {
                    relayERC2771: (_c = (_b = config === null || config === void 0 ? void 0 : config.contract) === null || _b === void 0 ? void 0 : _b.relayERC2771) !== null && _c !== void 0 ? _c : constants_1.GELATO_RELAY_ERC2771_ADDRESS,
                },
            };
        };
        /**
         * @param {CallWithSyncFeeRequest} request - CallWithSyncFee request to be relayed by Gelato Executors
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFee = (request, options) => library.relayWithSyncFee({ request, options }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {CallWithSyncFeeERC2771Request} request - CallWithSyncFeeERC2771 request to be relayed by Gelato Executors
         * @param {ethers.providers.Web3Provider | ethers.Wallet} walletOrProvider - Web3Provider [front-end] or Wallet [back-end] to sign the payload
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFeeERC2771 = (request, walletOrProvider, options) => library.relayWithCallWithSyncFeeERC2771({
            request,
            walletOrProvider,
            options,
        }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {SponsoredCallRequest} request SponsoredCallRequest to be relayed by the Gelato Executors.
         * @param {string} sponsorApiKey Sponsor API key to be used for the call
         * @param {RelayRequestOptions} [options] Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCall = (request, sponsorApiKey, options) => library.relayWithSponsoredCall({ request, sponsorApiKey, options }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {CallWithERC2771Request} request - CallWithERC2771Request to be relayed by Gelato Executors
         * @param {ethers.providers.Web3Provider | ethers.Wallet} walletOrProvider - Web3Provider [front-end] or Wallet [back-end] to sign the payload
         * @param {string} sponsorApiKey - Sponsor API key
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCallERC2771 = (request, walletOrProvider, sponsorApiKey, options) => library.relayWithSponsoredCallERC2771({
            request,
            walletOrProvider,
            sponsorApiKey,
            options,
        }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {CallWithERC2771Request} request - CallWithERC2771Request to be relayed by Gelato Executors
         * @param {ethers.providers.Web3Provider | ethers.Wallet} walletOrProvider - Web3Provider [front-end] or Wallet [back-end] to sign the payload
         * @param {ERC2771Type} type - ERC2771Type.CallWithSyncFee or ERC2771Type.SponsoredCall
         * @returns {Promise<SignatureData>} Response object with taskId parameter
         *
         */
        this.getSignatureDataERC2771 = (request, walletOrProvider, type) => library.getSignatureDataERC2771({ request, walletOrProvider, type }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {SignatureData["struct"]} struct - Struct that can be obtained from getSignatureDataERC2771
         * @param {SignatureData["signature"]} signature - Signature that can be obtained from getSignatureDataERC2771
         * @param {string} sponsorApiKey - Sponsor API key
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCallERC2771WithSignature = (struct, signature, sponsorApiKey, options) => library.sponsoredCallERC2771WithSignature({
            struct,
            signature,
            sponsorApiKey,
            options,
        }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {SignatureData["struct"]} struct - Struct that can be obtained from getSignatureDataERC2771
         * @param {BaseCallWithSyncFeeParams} syncFeeParams - Call with Sync Fee parameters
         * @param {SignatureData["signature"]} signature - Signature that can be obtained from getSignatureDataERC2771
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFeeERC2771WithSignature = (struct, syncFeeParams, signature, options) => library.callWithSyncFeeERC2771WithSignature({
            struct,
            syncFeeParams,
            signature,
            options,
        }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {number} chainId - Chain Id
         * @returns {Promise<boolean>} Boolean to demonstrate if Relay V2 is supported on the provided chain
         */
        this.isNetworkSupported = (chainId) => library.isNetworkSupported({ chainId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @returns {Promise<string[]>} List of networks where Relay V2 is supported
         */
        this.getSupportedNetworks = () => library.getSupportedNetworks(__classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {number} chainId - Chain Id
         * @returns {Promise<boolean>} Boolean to demonstrate if the oracle is active on the provided chain
         */
        this.isOracleActive = (chainId) => library.isOracleActive({ chainId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @returns {Promise<string[]>} List of chain ids where the Gelato Oracle is active
         */
        this.getGelatoOracles = () => library.getGelatoOracles(__classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {number} chainId - Chain Id
         * @returns {Promise<string[]>} List of all payment tokens on the provided chain
         *
         */
        this.getPaymentTokens = (chainId) => library.getPaymentTokens({ chainId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {number} chainId - Chain Id
         * @param {string} paymentToken - Payment Token
         * @param {BigNumber} gasLimit - Gas Limit
         * @param {boolean} isHighPriority - Priority Level
         * @param {BigNumber} [gasLimitL1=BigNumber.from(0)] - Gas Limit for Layer 1
         * @returns {Promise<BigNumber>} Estimated Fee
         *
         */
        this.getEstimatedFee = (chainId, paymentToken, gasLimit, isHighPriority, gasLimitL1 = ethers_1.BigNumber.from(0)) => library.getEstimatedFee({ chainId, paymentToken, gasLimit, isHighPriority, gasLimitL1 }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {string} taskId - Task Id
         * @returns {Promise<TransactionStatusResponse | undefined>} Transaction status of the task id
         *
         */
        this.getTaskStatus = (taskId) => library.getTaskStatus({ taskId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        __classPrivateFieldSet(this, _GelatoRelay_config, this._getConfiguration(config), "f");
    }
}
exports.GelatoRelay = GelatoRelay;
_GelatoRelay_config = new WeakMap();
